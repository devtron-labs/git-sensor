// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	git "github.com/devtron-labs/git-sensor/pkg/git"
	mock "github.com/stretchr/testify/mock"

	pkg "github.com/devtron-labs/git-sensor/pkg"

	sql "github.com/devtron-labs/git-sensor/internals/sql"
)

// RepoManager is an autogenerated mock type for the RepoManager type
type RepoManager struct {
	mock.Mock
}

// AddRepo provides a mock function with given fields: material
func (_m *RepoManager) AddRepo(material []*sql.GitMaterial) ([]*sql.GitMaterial, error) {
	ret := _m.Called(material)

	var r0 []*sql.GitMaterial
	var r1 error
	if rf, ok := ret.Get(0).(func([]*sql.GitMaterial) ([]*sql.GitMaterial, error)); ok {
		return rf(material)
	}
	if rf, ok := ret.Get(0).(func([]*sql.GitMaterial) []*sql.GitMaterial); ok {
		r0 = rf(material)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*sql.GitMaterial)
		}
	}

	if rf, ok := ret.Get(1).(func([]*sql.GitMaterial) error); ok {
		r1 = rf(material)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchChanges provides a mock function with given fields: pipelineMaterialId, from, to, count
func (_m *RepoManager) FetchChanges(pipelineMaterialId int, from string, to string, count int) (*git.MaterialChangeResp, error) {
	ret := _m.Called(pipelineMaterialId, from, to, count)

	var r0 *git.MaterialChangeResp
	var r1 error
	if rf, ok := ret.Get(0).(func(int, string, string, int) (*git.MaterialChangeResp, error)); ok {
		return rf(pipelineMaterialId, from, to, count)
	}
	if rf, ok := ret.Get(0).(func(int, string, string, int) *git.MaterialChangeResp); ok {
		r0 = rf(pipelineMaterialId, from, to, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.MaterialChangeResp)
		}
	}

	if rf, ok := ret.Get(1).(func(int, string, string, int) error); ok {
		r1 = rf(pipelineMaterialId, from, to, count)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllWebhookEventConfigForHost provides a mock function with given fields: gitHostId
func (_m *RepoManager) GetAllWebhookEventConfigForHost(gitHostId int) ([]*git.WebhookEventConfig, error) {
	ret := _m.Called(gitHostId)

	var r0 []*git.WebhookEventConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]*git.WebhookEventConfig, error)); ok {
		return rf(gitHostId)
	}
	if rf, ok := ret.Get(0).(func(int) []*git.WebhookEventConfig); ok {
		r0 = rf(gitHostId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*git.WebhookEventConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(gitHostId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommitInfoForTag provides a mock function with given fields: request
func (_m *RepoManager) GetCommitInfoForTag(request *git.CommitMetadataRequest) (*git.GitCommit, error) {
	ret := _m.Called(request)

	var r0 *git.GitCommit
	var r1 error
	if rf, ok := ret.Get(0).(func(*git.CommitMetadataRequest) (*git.GitCommit, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*git.CommitMetadataRequest) *git.GitCommit); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GitCommit)
		}
	}

	if rf, ok := ret.Get(1).(func(*git.CommitMetadataRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommitMetadata provides a mock function with given fields: pipelineMaterialId, gitHash
func (_m *RepoManager) GetCommitMetadata(pipelineMaterialId int, gitHash string) (*git.GitCommit, error) {
	ret := _m.Called(pipelineMaterialId, gitHash)

	var r0 *git.GitCommit
	var r1 error
	if rf, ok := ret.Get(0).(func(int, string) (*git.GitCommit, error)); ok {
		return rf(pipelineMaterialId, gitHash)
	}
	if rf, ok := ret.Get(0).(func(int, string) *git.GitCommit); ok {
		r0 = rf(pipelineMaterialId, gitHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GitCommit)
		}
	}

	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(pipelineMaterialId, gitHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommitMetadataForPipelineMaterial provides a mock function with given fields: pipelineMaterialId, gitHash
func (_m *RepoManager) GetCommitMetadataForPipelineMaterial(pipelineMaterialId int, gitHash string) (*git.GitCommit, error) {
	ret := _m.Called(pipelineMaterialId, gitHash)

	var r0 *git.GitCommit
	var r1 error
	if rf, ok := ret.Get(0).(func(int, string) (*git.GitCommit, error)); ok {
		return rf(pipelineMaterialId, gitHash)
	}
	if rf, ok := ret.Get(0).(func(int, string) *git.GitCommit); ok {
		r0 = rf(pipelineMaterialId, gitHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GitCommit)
		}
	}

	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(pipelineMaterialId, gitHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHeadForPipelineMaterials provides a mock function with given fields: ids
func (_m *RepoManager) GetHeadForPipelineMaterials(ids []int) ([]*git.CiPipelineMaterialBean, error) {
	ret := _m.Called(ids)

	var r0 []*git.CiPipelineMaterialBean
	var r1 error
	if rf, ok := ret.Get(0).(func([]int) ([]*git.CiPipelineMaterialBean, error)); ok {
		return rf(ids)
	}
	if rf, ok := ret.Get(0).(func([]int) []*git.CiPipelineMaterialBean); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*git.CiPipelineMaterialBean)
		}
	}

	if rf, ok := ret.Get(1).(func([]int) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestCommitForBranch provides a mock function with given fields: pipelineMaterialId, branchName
func (_m *RepoManager) GetLatestCommitForBranch(pipelineMaterialId int, branchName string) (*git.GitCommit, error) {
	ret := _m.Called(pipelineMaterialId, branchName)

	var r0 *git.GitCommit
	var r1 error
	if rf, ok := ret.Get(0).(func(int, string) (*git.GitCommit, error)); ok {
		return rf(pipelineMaterialId, branchName)
	}
	if rf, ok := ret.Get(0).(func(int, string) *git.GitCommit); ok {
		r0 = rf(pipelineMaterialId, branchName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GitCommit)
		}
	}

	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(pipelineMaterialId, branchName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReleaseChanges provides a mock function with given fields: request
func (_m *RepoManager) GetReleaseChanges(request *pkg.ReleaseChangesRequest) (*git.GitChanges, error) {
	ret := _m.Called(request)

	var r0 *git.GitChanges
	var r1 error
	if rf, ok := ret.Get(0).(func(*pkg.ReleaseChangesRequest) (*git.GitChanges, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*pkg.ReleaseChangesRequest) *git.GitChanges); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GitChanges)
		}
	}

	if rf, ok := ret.Get(1).(func(*pkg.ReleaseChangesRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWebhookAndCiDataById provides a mock function with given fields: id, ciPipelineMaterialId
func (_m *RepoManager) GetWebhookAndCiDataById(id int, ciPipelineMaterialId int) (*git.WebhookAndCiData, error) {
	ret := _m.Called(id, ciPipelineMaterialId)

	var r0 *git.WebhookAndCiData
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (*git.WebhookAndCiData, error)); ok {
		return rf(id, ciPipelineMaterialId)
	}
	if rf, ok := ret.Get(0).(func(int, int) *git.WebhookAndCiData); ok {
		r0 = rf(id, ciPipelineMaterialId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.WebhookAndCiData)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(id, ciPipelineMaterialId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWebhookEventConfig provides a mock function with given fields: eventId
func (_m *RepoManager) GetWebhookEventConfig(eventId int) (*git.WebhookEventConfig, error) {
	ret := _m.Called(eventId)

	var r0 *git.WebhookEventConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*git.WebhookEventConfig, error)); ok {
		return rf(eventId)
	}
	if rf, ok := ret.Get(0).(func(int) *git.WebhookEventConfig); ok {
		r0 = rf(eventId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.WebhookEventConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(eventId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWebhookPayloadDataForPipelineMaterialId provides a mock function with given fields: request
func (_m *RepoManager) GetWebhookPayloadDataForPipelineMaterialId(request *git.WebhookPayloadDataRequest) (*git.WebhookPayloadDataResponse, error) {
	ret := _m.Called(request)

	var r0 *git.WebhookPayloadDataResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*git.WebhookPayloadDataRequest) (*git.WebhookPayloadDataResponse, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*git.WebhookPayloadDataRequest) *git.WebhookPayloadDataResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.WebhookPayloadDataResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*git.WebhookPayloadDataRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWebhookPayloadFilterDataForPipelineMaterialId provides a mock function with given fields: request
func (_m *RepoManager) GetWebhookPayloadFilterDataForPipelineMaterialId(request *git.WebhookPayloadFilterDataRequest) (*git.WebhookPayloadFilterDataResponse, error) {
	ret := _m.Called(request)

	var r0 *git.WebhookPayloadFilterDataResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*git.WebhookPayloadFilterDataRequest) (*git.WebhookPayloadFilterDataResponse, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*git.WebhookPayloadFilterDataRequest) *git.WebhookPayloadFilterDataResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.WebhookPayloadFilterDataResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*git.WebhookPayloadFilterDataRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshGitMaterial provides a mock function with given fields: req
func (_m *RepoManager) RefreshGitMaterial(req *git.RefreshGitMaterialRequest) (*git.RefreshGitMaterialResponse, error) {
	ret := _m.Called(req)

	var r0 *git.RefreshGitMaterialResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*git.RefreshGitMaterialRequest) (*git.RefreshGitMaterialResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*git.RefreshGitMaterialRequest) *git.RefreshGitMaterialResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.RefreshGitMaterialResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*git.RefreshGitMaterialRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReloadAllRepo provides a mock function with given fields:
func (_m *RepoManager) ReloadAllRepo() {
	_m.Called()
}

// ResetRepo provides a mock function with given fields: materialId
func (_m *RepoManager) ResetRepo(materialId int) error {
	ret := _m.Called(materialId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(materialId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveGitProvider provides a mock function with given fields: provider
func (_m *RepoManager) SaveGitProvider(provider *sql.GitProvider) (*sql.GitProvider, error) {
	ret := _m.Called(provider)

	var r0 *sql.GitProvider
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.GitProvider) (*sql.GitProvider, error)); ok {
		return rf(provider)
	}
	if rf, ok := ret.Get(0).(func(*sql.GitProvider) *sql.GitProvider); ok {
		r0 = rf(provider)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.GitProvider)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.GitProvider) error); ok {
		r1 = rf(provider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SavePipelineMaterial provides a mock function with given fields: material
func (_m *RepoManager) SavePipelineMaterial(material []*sql.CiPipelineMaterial) ([]*sql.CiPipelineMaterial, error) {
	ret := _m.Called(material)

	var r0 []*sql.CiPipelineMaterial
	var r1 error
	if rf, ok := ret.Get(0).(func([]*sql.CiPipelineMaterial) ([]*sql.CiPipelineMaterial, error)); ok {
		return rf(material)
	}
	if rf, ok := ret.Get(0).(func([]*sql.CiPipelineMaterial) []*sql.CiPipelineMaterial); ok {
		r0 = rf(material)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*sql.CiPipelineMaterial)
		}
	}

	if rf, ok := ret.Get(1).(func([]*sql.CiPipelineMaterial) error); ok {
		r1 = rf(material)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRepo provides a mock function with given fields: material
func (_m *RepoManager) UpdateRepo(material *sql.GitMaterial) (*sql.GitMaterial, error) {
	ret := _m.Called(material)

	var r0 *sql.GitMaterial
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.GitMaterial) (*sql.GitMaterial, error)); ok {
		return rf(material)
	}
	if rf, ok := ret.Get(0).(func(*sql.GitMaterial) *sql.GitMaterial); ok {
		r0 = rf(material)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.GitMaterial)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.GitMaterial) error); ok {
		r1 = rf(material)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepoManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepoManager creates a new instance of RepoManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepoManager(t mockConstructorTestingTNewRepoManager) *RepoManager {
	mock := &RepoManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
